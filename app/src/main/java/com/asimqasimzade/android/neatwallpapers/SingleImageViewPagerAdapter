package com.asimqasimzade.android.neatwallpapers;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.Paint;
import android.media.MediaScannerConnection;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Environment;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentStatePagerAdapter;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import com.asimqasimzade.android.neatwallpapers.Data.ImagesDataClass;
import com.bumptech.glide.Glide;
import com.bumptech.glide.request.animation.GlideAnimation;
import com.bumptech.glide.request.target.SimpleTarget;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;

import static java.lang.Thread.sleep;

/**
 * Created by Asim on 2/1/2017.
 */

public class SingleImageViewPagerAdapter extends FragmentStatePagerAdapter {

    Context mContext;
    int mImageNumber;
    Button favoriteButton;
    Button setAsWallpaperButton;
    Button downloadButton;
    SimpleTarget<Bitmap> target;
    File imageFile;
    File imageFileForChecking;

    public SingleImageViewPagerAdapter (FragmentManager fm, Context context, int imageNumber) {
        super(fm);
        mContext = context;
        mImageNumber = imageNumber;

    }

    @Override
    public Fragment getItem(int position) {
        //Getting url of current selected image from ImagesDataClass using imageNumber from
        // intent and ViewPager page position
        int currentPosition = mImageNumber + position;
        String currentImageUrl = ImagesDataClass.imageslist.get(currentPosition).getImage();
        String currentAuthorInfo = ImagesDataClass.imageslist.get(currentPosition).getAuthor();
        final String currentImageLink = ImagesDataClass.imageslist.get(currentPosition).getLink();

        SingleImageFragment singleImageFragment = new SingleImageFragment();

        //Downloading and setting image
        final ImageView imageView = (ImageView) itemView.findViewById(R.id.single_image_view);
        Glide.with(mContext).load(currentImageUrl).into(imageView);

        //Setting author info
        TextView authorInfoTextView = (TextView) findViewById(R.id.author_info_text_view);
        authorInfoTextView.setText(String.format(getResources().getString(R.string.author_info), currentAuthorInfo));

        //Setting image link
        TextView imageLinkTextView = (TextView) findViewById(R.id.image_link_text_view);
        imageLinkTextView.setPaintFlags(imageLinkTextView.getPaintFlags() | Paint.UNDERLINE_TEXT_FLAG);

        imageLinkTextView.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                Intent openImageLinkIntent = new Intent(Intent.ACTION_VIEW);
                openImageLinkIntent.setData(Uri.parse(currentImageLink));
                startActivity(openImageLinkIntent);
            }
        });

        //-----------------------------------------------------------------------------------------
        // Favorite button
        //-----------------------------------------------------------------------------------------

        favoriteButton = (Button) findViewById(R.id.single_image_favorite_button);
        new SingleImageActivity.ImageIsFavoriteTask().execute();

        favoriteButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                //When favorite button inside SingleImageActivity is clicked, we are adding this
                //image to Favorites database and changing background of a button
                new SingleImageActivity.AddOrRemoveFavoriteAsyncTask().execute();
                //Sending back return intent to FavoritesFragment to update it's GridView with new data
                Intent databaseIsChangedIntent = new Intent();
                setResult(Activity.RESULT_OK, databaseIsChangedIntent);
            }
        });


        //-----------------------------------------------------------------------------------------
        // Set as wallpaper button
        //-----------------------------------------------------------------------------------------

        setAsWallpaperButton = (Button) findViewById(R.id.set_as_wallpaper_button);

        setAsWallpaperButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                //Change the current Wallpaper:
                //if image doesn't exist then download it first
                operation = SingleImageActivity.Operation.SET_AS_WALLPAPER;
                if (!fileExists(imageFileForChecking)) {
                    Glide.with(getApplicationContext()).load(imageUrl).asBitmap().into(target);
                } else {
                    //if it exists, just set it as wallpaper
                    setWallpaper(imageFileForChecking);
                }
            }
        });


        //-----------------------------------------------------------------------------------------
        // Download button
        //-----------------------------------------------------------------------------------------

        downloadButton = (Button) findViewById(R.id.download_button);

        downloadButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                //Downloading image
                // if it already exists Toast message, saying that it does
                operation = SingleImageActivity.Operation.DOWNLOAD;
                if (fileExists(imageFileForChecking)) {
                    Toast.makeText(getApplicationContext(), "Image already exists. Check your Gallery.", Toast.LENGTH_SHORT).show();
                } else {
                    //if it doesn't exist, download it
                    Glide.with(getApplicationContext()).load(imageUrl).asBitmap().into(target);
                }
            }
        });


        target = new SimpleTarget<Bitmap>() {

            @Override
            public void onResourceReady(final Bitmap bitmap, GlideAnimation<? super Bitmap> glideAnimation) {
                new AsyncTask<Void, Integer, Boolean>() {
                    @Override
                    protected void onPreExecute() {
                        super.onPreExecute();
                        showProgressDialog();
                    }


                    @Override
                    protected Boolean doInBackground(Void... voids) {

                        final int totalProgressTime = 100;
                        //Specifying path to our app's directory
                        File path = Environment.getExternalStoragePublicDirectory("NeatWallpapers");
                        //Creating imageFile using path to our custom album
                        imageFile = new File(path, "NEATWALLPAPERS_" + imageName + ".jpg");

                        //Creating our custom album directory, if it's not created, logging error message
                        if (!path.mkdirs()) {
                            Log.e(LOG_TAG, "Directory not created");
                        }

                        //We are checking if there is ExternalStorage mounted on device and is it
                        //readable
                        if (isExternalStorageWritable()) {
                            int jumpTime = 5;
                            try {
                                outputStream = new FileOutputStream(imageFile);
                                bitmap.compress(Bitmap.CompressFormat.JPEG, 100, outputStream);

                                while (jumpTime < totalProgressTime) {
                                    try {
                                        sleep(100);
                                        //publishing progress
                                        //after that onProgressUpdate will be called
                                        publishProgress(jumpTime);
                                        jumpTime += 5;

                                    } catch (InterruptedException e) {
                                        e.printStackTrace();
                                    }
                                }

                            } catch (IOException e) {
                                e.printStackTrace();
                            } finally {
                                try {
                                    outputStream.flush();
                                    outputStream.close();
                                } catch (IOException e) {
                                    e.printStackTrace();
                                }
                            }
                            // Tell the media scanner about the new file so that it is
                            // immediately available to the user.
                            MediaScannerConnection.scanFile(getApplicationContext(),
                                    new String[]{imageFile.getAbsolutePath()},
                                    null,
                                    new MediaScannerConnection.OnScanCompletedListener() {
                                        public void onScanCompleted(String path, Uri uri) {
                                            Log.i("ExternalStorage", "Scanned " + path + ":");
                                            Log.i("ExternalStorage", "-> uri=" + uri);
                                        }
                                    }
                            );
                        } else {
                            Log.e(LOG_TAG, "External memory is not available to write");
                        }
                        return null;
                    }

                    @Override
                    protected void onProgressUpdate(Integer... values) {
                        super.onProgressUpdate(values);
                        //Setting progress value
                            /*progressDialog.setMax(100);*/
                        progressDialog.setProgress(values[0]);
                    }

                    @Override
                    protected void onPostExecute(Boolean aBoolean) {
                        //Dismiss the progress dialog
                        if (progressDialog.isShowing()) {
                            progressDialog.dismiss();
                        }

                        //Checking the result and giving feedback to user about success
                        if (operation == SingleImageActivity.Operation.DOWNLOAD) {
                            if (fileExists(imageFile)) {
                                Log.e(LOG_TAG, "Image successfully saved");
                                Toast.makeText(getApplicationContext(), "Image is successfully saved!",
                                        Toast.LENGTH_SHORT).show();
                            } else {
                                Log.e(LOG_TAG, "Problem while downloading image");
                                Toast.makeText(SingleImageActivity.this,
                                        "Problem while downloading image, please try again",
                                        Toast.LENGTH_SHORT).show();
                            }
                        } else {
                            //Checking the result and giving feedback to user about success
                            if (fileExists(imageFile)) {
                                setWallpaper(imageFile);
                                Log.e(LOG_TAG, "Wallpaper Set successfully");
                            } else {
                                Log.e(LOG_TAG, "Problem while setting wallpaper");
                            }
                        }
                    }
                }.execute();
            }
        };

        return singleImageFragment;
    }

    @Override
    public int getCount() {
        return 200;
    }
}
